3-tier
	스프링 프로젝트는 3-tier 방식으로 구성한다.

[Presentation Tier(화면 계층)]
	화면에 보여주는 기술을 사용하는 영역.
	컨트롤러에서 사용자의 요청에 맞는 응답처리를 진행하며,
	HTML엔진(thymeleaf), HTML등이 담당하는 영역이다.

[Business Tier(비지니스 계층)]
	순수한 비지니스 로직을 담고 있는 영역.
	고객이 원하는 요구사항을 반영하는 계층이기 때문에 중요한 영역이다.
	이 영역의 설계는 고객의 요구사항과 정확히 일치해야 한다.

[Persistence Tier(영속 혹은 데이터 계층)]
	DBMS 설계가 들어가는 계층.
-------------------------------------------------------------------------------------------
각 영역은 독립적으로 설계되어 나중에 특정한 기술이 변하더라도 필요한 부분을 부품처럼 쉽게 교환할 수 있는 방식이다.
각 연결 부위는 인터페이스를 이용해서 설계하는 것이 일반적인 구성 방식이다.


Presentation ↔ Business ↔ Persistence  ↔ DBMS
			↑	       ↑
		Service Interface   Mapper Interface
-------------------------------------------------------------------------------------------
Spring MVC(Front-Controller Pattern)
	
		HandlerMaping
REQUEST	  ①	      ②↕	    ③		        ④
	] ↔	DispatcherServlet   ↔  HandlerAdapter   ↔  Controller
RESPONSE  ⑦	⑥↕	     ⑤↕
		View	ViewResolver
		  ↕
		HTML 및 기타

	1. 사용자의 Request는 Front-Controller인 DispatcherServlet을 통해 처리한다.
	2. HandlerMapping은 Request의 처리를 담당하는 컨트롤러를 찾기 위해서 존재한다.
	   HandlerMapping 인터페이스를 구현한 여러 객체중 @Controller 어노테이션이 적용된 것을 기준으로
	   판단하며, 적절한 컨트롤러가 찾아졌다면 HandlerAdapter를 이용해서 해당 컨트롤러를 동작시킨다.
	3. Controller는 Request를 처리하는 비지니스 로직을 작성하며, View에 전달해야 하는 데이터는 주로
	   Model 객체에 담아서 전달한다. 이에 대한 처리는 ViewResolver를 이용하게 된다.
	4. ViewResolver는 Controller가 리턴한 결과 앞에 절대 경로, 뒤에 .html확장자를 붙여준다.
	5. 응답 페이지의 전체경로가 완성되면 View객체를 통해 해당 페이지의 응답준비를 한다.
	6. 준비된 응답은 DispatcherServlet을 통해서 전송된다.


	*특징
	- HttpServletRequest, HttpServletResponse를 거의 사용할 필요 없이 기능 구현
	- 다양한 타입의 파라미터 처리, 다양한 타입의 리턴 타입 사용이 가능
	- GET방식, POST방식 등 전송 방식에 대한 처리를 어노테이션으로 처리 가능(@GetMapping, @PostMapping)






















